type Vec t =
    data: Ptr t
    len: Usz
    cap: Usz

empty () = Vec (null ()) 0 0

of iterable =
    v = mut empty ()
    @fill v iterable

is_empty v = v.len == 0

indices (v: Vec a) = Range 0 v.len

len v = v.len

capacity v = v.cap

//Fill Vec with items from the iterable
fill (v: Ref (Vec t)) iterable : Ref (Vec t) =
    iter iterable (push v _)
    v

//reserve numElements in Vec v, elements will be uninitialized
reserve (v: Ref (Vec t)) (numElems: Usz) : Unit =
    if v.len + numElems > v.cap then
        size = (v.cap + numElems) * size_of (MkType: Type t)
        ptr = realloc (v.data) size

        if ptr == null () then
            print "Error in reserving more elements for Vec"
            return ()

        v.&data := ptr
        v.&cap := v.cap + numElems

//push an element onto the end of the vector.
//resizes if necessary
push (v: Ref (Vec t)) (elem: t) : Unit =
    if v.len >= v.cap then
        reserve v (if v.cap == 0usz then 1 else v.cap)

    array_insert v.data v.len elem
    v.&len := v.len + 1usz

//pop the last element off if it exists
//this will never resize the vector.
pop (v: Ref (Vec t)) : Maybe t =
    if is_empty v then None
    else
        v.&len := v.len - 1
        Some (v.data#v.len)

//remove the element at the given index and return it.
//will error if the index is out of bounds.
remove_index (v: Ref (Vec t)) (idx:Usz) : t =
    if idx == v.len - 1 then
        v.&len := v.len - 1
    else if idx >= 0 and idx < v.len - 1 then
        iter_range idx (v.len - 1) fn i ->
            array_insert v.data i (v.data#(i+1))

        v.&len := v.len - 1
    else
        panic "Vec.remove_index: index ${idx} out of bounds for Vec of length ${v.len}"

    v.data#v.len

//remove the first instance of the given element from
//the vector or none if the element was not found.
//Uses == to determine element equality.
//returns the index where the element was found.
remove_first (v: Ref (Vec t)) (elem: t) : Maybe Usz =
    loop (i = 0) ->
        if i >= v.len then
            None
        else if elem == v.data#i then
            remove_index v i
            Some i
        else recur (i + 1)

//Remove the given indices from the vector
//Expects the indices to be in sorted order.
//Will error if any index is out of bounds.
remove_indices (v: Ref (Vec t)) (idxs: Vec Usz) : Unit =
    moved = mut 0
    iter (indices idxs) fn i ->
        cur = idxs.data#i

        if cur < 0 or cur >= v.len then
            panic "Vec.remove: index $cur out of bounds for Vec of length ${v.len}"

        moved := @moved + 1
        if i != idxs.len - 1 then
            nxt = idxs.data#(i + 1)
            iter_range (cur + 1) nxt fn j ->
                array_insert v.data (j - @moved) (v.data#j)
        else
            iter_range (cur + 1) v.len fn j ->
                array_insert v.data (j - @moved) (v.data#j)

    v.&len := v.len - @moved

//remove all matching elements from the vector and
//return the number of elements removed.
//Uses = to determine element equality.
remove_all (v: Ref (Vec t)) (elem: t) : Usz =
    idxs = mut empty ()
    iter (indices @v) fn i ->
        if elem == v.data#i then
            push idxs i

    remove_indices v @idxs
    idxs.len


//Remove an element by swapping it with the last element in O(1) time.
//Returns true if a swap was performed or false otherwise.
//Will not swap if the given index is the index of the last element.
swap_last (v: Ref (Vec t)) (idx:Usz) : Bool =
    if idx >= v.len or idx + 1 == v.len then false
    else
        v.&len := v.len - 1
        array_insert v.data idx (v.data#v.len)
        true


// type VecIter t =
//     view: Ref t
//     idx: Usz
//     len: Usz
// 
// impl Iterable (Vec t) (VecIter t) t with
//     into_iter v = VecIter v.data 0usz v.len
// 
// impl Iterator (VecIter t) t with
//     cur_elem v = v.view#v.idx
//     advance v = VecIter v.view (v.idx + 1usz) v.len
//     has_next v = v.idx < v.len
// 
// 
impl Print (Vec t) given Print t with
    printne v =
        printne "["
        print_helper v 0
        printne "]"

print_helper (v: Vec q) (i: Usz) : Unit =
    if i < v.len then
        // TODO: This fails to find the correct impl without
        // this type annotation
        printne ((v.data#i) : q)
        if i + 1 != v.len then
            printne ", "

        print_helper v (i + 1)

impl Extract (Vec t) Usz t with
    (#) v i = v.data#i

// impl Insert (Vec t) Usz t with
//     insert v i x = v.data#i := x
// 
// impl In t (Vec t) with
//     (in) elem v =
//         for e in v do
//             if e == elem then
//                 return true
//         false
// 
// impl Eq (Vec t) with
//     (==) l r =
//         if l.len != r.len then
//             return false
// 
//         for i in 0 .. cast l.len do
//             if l.data#i != r.data#i then
//                 return false
//         true
