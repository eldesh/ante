// builtin function
/*
        prelude.an
    Standard functions and datatypes pre-imported
    into every Ante source file.
*/

//C functions
extern
    // varargs is not supported by the cranelift backend
    // printf: Ptr Char - ... -> Unit
    puts: Ptr Char -> I32
    putchar: Char -> Unit
    getchar: Unit -> I32
    exit: I32 -> never_returns
    malloc: Usz -> Ptr a
    calloc: /*items:*/Usz - /*size:*/Usz -> Ptr a
    realloc: Ptr a - Usz -> Ptr a
    free: Ptr a -> Unit
    memcpy: Ptr a - Ptr b - Usz -> Ptr a //dest
    system: Ptr Char -> I32
    strlen: Ptr Char -> Usz

//C stdio
type File = f: Ptr Unit
type FilePos = f: Ptr Unit

type InFile = f:File
type OutFile = f:File

extern
    fopen: Ptr Char - Ptr Char -> File
    fclose: File -> Unit

    fputs: Ptr Char - OutFile -> I32
    fputc: I32 - OutFile -> I32
    fwrite: Ptr U8 - Usz - Usz - OutFile -> Usz

    fgetc: InFile -> I32
    fgets: Ptr Char - I32 - InFile -> Ptr Char
    ungetc: I32 - InFile -> I32

    fgetpos: File - FilePos -> Unit
    ftell: File -> I32
    fsetpos: File - FilePos -> Unit
    fseek: File - I32 - I32 -> I32

    feof: InFile -> I32
    ferror: File -> I32

type Maybe t =
   | None
   | Some t

type Result t e =
   | Ok t
   | Error e

impl Eq (Maybe e) given Eq e with
    (==) l r =
        match l, r
        | Some lv, Some rv -> lv == rv
        | None, None -> true
        | _ -> false

first (a, _) = a
second (_, b) = b
third (_, _, c) = c
fourth (_, _, _, d) = d
fifth (_, _, _, _, e) = e

/// A type conversion from a to b
trait Cast a b with
    cast: a -> b

impl Cast a a with
    cast a = a

impl Cast (Ptr a) Usz with
    cast ptr = transmute ptr

impl Cast Usz (Ptr a) with
    cast address = transmute address

impl Cast (Maybe m) String given Cast m String with
    cast maybe =
        match maybe
        | Some val -> "Some (" ++ cast val ++ ")"
        | None -> "None"

// Begin wall of casts
impl Cast U8 U16 with cast x = builtin "ZeroExtend" x
impl Cast U8 U32 with cast x = builtin "ZeroExtend" x
impl Cast U8 U64 with cast x = builtin "ZeroExtend" x
impl Cast U8 Usz with cast x = builtin "ZeroExtend" x

impl Cast U16 U8  with cast x = builtin "Truncate" x
impl Cast U16 U32 with cast x = builtin "ZeroExtend" x
impl Cast U16 U64 with cast x = builtin "ZeroExtend" x
impl Cast U16 Usz with cast x = builtin "ZeroExtend" x

impl Cast U32 U8  with cast x = builtin "Truncate" x
impl Cast U32 U16 with cast x = builtin "Truncate" x
impl Cast U32 U64 with cast x = builtin "ZeroExtend" x
impl Cast U32 Usz with cast x = builtin "ZeroExtend" x

impl Cast U64 U8  with cast x = builtin "Truncate" x
impl Cast U64 U16 with cast x = builtin "Truncate" x
impl Cast U64 U32 with cast x = builtin "Truncate" x
impl Cast U64 Usz with cast x = builtin "Truncate" x

impl Cast Usz U8  with cast x = builtin "Truncate" x
impl Cast Usz U16 with cast x = builtin "Truncate" x
impl Cast Usz U32 with cast x = builtin "Truncate" x
impl Cast Usz U64 with cast x = builtin "ZeroExtend" x

// Signed types
impl Cast I8 I16 with cast x = builtin "SignExtend" x
impl Cast I8 I32 with cast x = builtin "SignExtend" x
impl Cast I8 I64 with cast x = builtin "SignExtend" x
impl Cast I8 Isz with cast x = builtin "SignExtend" x

impl Cast I16 I8  with cast x = builtin "Truncate" x
impl Cast I16 I32 with cast x = builtin "SignExtend" x
impl Cast I16 I64 with cast x = builtin "SignExtend" x
impl Cast I16 Isz with cast x = builtin "SignExtend" x

impl Cast I32 I8  with cast x = builtin "Truncate" x
impl Cast I32 I16 with cast x = builtin "Truncate" x
impl Cast I32 I64 with cast x = builtin "SignExtend" x
impl Cast I32 Isz with cast x = builtin "SignExtend" x

impl Cast I64 I8  with cast x = builtin "Truncate" x
impl Cast I64 I16 with cast x = builtin "Truncate" x
impl Cast I64 I32 with cast x = builtin "Truncate" x
impl Cast I64 Isz with cast x = builtin "Truncate" x

impl Cast Isz I8  with cast x = builtin "Truncate" x
impl Cast Isz I16 with cast x = builtin "Truncate" x
impl Cast Isz I32 with cast x = builtin "Truncate" x
impl Cast Isz I64 with cast x = builtin "SignExtend" x

// Float casts
impl Cast I8  (Float a) with cast x = builtin "SignedToFloat" x
impl Cast I16 (Float a) with cast x = builtin "SignedToFloat" x
impl Cast I32 (Float a) with cast x = builtin "SignedToFloat" x
impl Cast I64 (Float a) with cast x = builtin "SignedToFloat" x
impl Cast Isz (Float a) with cast x = builtin "SignedToFloat" x

impl Cast U8  (Float a) with cast x = builtin "UnsignedToFloat" x
impl Cast U16 (Float a) with cast x = builtin "UnsignedToFloat" x
impl Cast U32 (Float a) with cast x = builtin "UnsignedToFloat" x
impl Cast U64 (Float a) with cast x = builtin "UnsignedToFloat" x
impl Cast Usz (Float a) with cast x = builtin "UnsignedToFloat" x

impl Cast (Float a) I8  with cast x = builtin "FloatToSigned" x
impl Cast (Float a) I16 with cast x = builtin "FloatToSigned" x
impl Cast (Float a) I32 with cast x = builtin "FloatToSigned" x
impl Cast (Float a) I64 with cast x = builtin "FloatToSigned" x
impl Cast (Float a) Isz with cast x = builtin "FloatToSigned" x

impl Cast (Float a) U8  with cast x = builtin "FloatToUnsigned" x
impl Cast (Float a) U16 with cast x = builtin "FloatToUnsigned" x
impl Cast (Float a) U32 with cast x = builtin "FloatToUnsigned" x
impl Cast (Float a) U64 with cast x = builtin "FloatToUnsigned" x
impl Cast (Float a) Usz with cast x = builtin "FloatToUnsigned" x

impl Cast F64 F32 with cast x = builtin "FloatDemote" x
impl Cast F32 F64 with cast x = builtin "FloatPromote" x

// x -> Char casts
impl Cast I8 Char with cast = transmute
impl Cast I16 Char with cast x = builtin "Truncate" x
impl Cast I32 Char with cast x = builtin "Truncate" x
impl Cast I64 Char with cast x = builtin "Truncate" x
impl Cast Isz Char with cast x = builtin "Truncate" x

impl Cast U8 Char with cast = transmute
impl Cast U16 Char with cast x = builtin "Truncate" x
impl Cast U32 Char with cast x = builtin "Truncate" x
impl Cast U64 Char with cast x = builtin "Truncate" x
impl Cast Usz Char with cast x = builtin "Truncate" x

// Other casts: TODO fill in
impl Cast I32 Usz with cast x =
    // TODO: Review. Does this match C?
    transmute (cast x : Isz)

impl Cast Char I32 with cast x = builtin "SignExtend" x

/// Represents a failable type cast from a to b
trait TryCast a b with
    try_cast: a -> Maybe b

impl TryCast a b given Cast a b with
    try_cast a = Some (cast a)


// Huge block of builtin numeric operators incoming
trait Add n with (+): n - n -> n
impl Add (Int a) with (+) x y = builtin "AddInt" x y
impl Add (Float a) with (+) x y = builtin "AddFloat" x y
impl Add Char with (+) (x: Char) (y: Char) : Char = builtin "AddInt" x y

trait Sub n with (-): n - n -> n
impl Sub (Int a) with (-) x y = builtin "SubInt" x y
impl Sub (Float a) with (-) x y = builtin "SubFloat" x y
impl Sub Char with (-) (x: Char) (y: Char) : Char = builtin "SubInt" x y

trait Mul n with (*): n - n -> n
impl Mul (Int a) with (*) x y = builtin "MulInt" x y
impl Mul (Float a) with (*) x y = builtin "MulFloat" x y

trait Div n with (/): n - n -> n
impl Div I8  with (/) x y = builtin "DivSigned" x y
impl Div I16 with (/) x y = builtin "DivSigned" x y
impl Div I32 with (/) x y = builtin "DivSigned" x y
impl Div I64 with (/) x y = builtin "DivSigned" x y
impl Div Isz with (/) x y = builtin "DivSigned" x y
impl Div U8  with (/) x y = builtin "DivUnsigned" x y
impl Div U16 with (/) x y = builtin "DivUnsigned" x y
impl Div U32 with (/) x y = builtin "DivUnsigned" x y
impl Div U64 with (/) x y = builtin "DivUnsigned" x y
impl Div Usz with (/) x y = builtin "DivUnsigned" x y
impl Div (Float a) with (/) x y = builtin "DivFloat" x y

trait Mod n with (%): n - n -> n
impl Mod I8  with (%) x y = builtin "ModSigned" x y
impl Mod I16 with (%) x y = builtin "ModSigned" x y
impl Mod I32 with (%) x y = builtin "ModSigned" x y
impl Mod I64 with (%) x y = builtin "ModSigned" x y
impl Mod Isz with (%) x y = builtin "ModSigned" x y
impl Mod U8  with (%) x y = builtin "ModUnsigned" x y
impl Mod U16 with (%) x y = builtin "ModUnsigned" x y
impl Mod U32 with (%) x y = builtin "ModUnsigned" x y
impl Mod U64 with (%) x y = builtin "ModUnsigned" x y
impl Mod Usz with (%) x y = builtin "ModUnsigned" x y

// Cranelift backend does not support floating-point remainder or modulus
// impl Mod F64 with (%) (_: F64) (_: F64) : F64 = builtin "ModFloat"

trait Eq t with (==): t - t -> Bool
impl Eq (Int a) with (==) x y = builtin "EqInt" x y
impl Eq (Float a) with (==) x y = builtin "EqFloat" x y

impl Eq Char with (==) (x: Char) (y: Char) : Bool = builtin "EqChar" x y
impl Eq Bool with (==) (x: Bool) (y: Bool) : Bool = builtin "EqBool" x y

(not) a = if a then false else true
(!=) l r = not (l == r)

trait Cmp a with
    (<): a - a -> Bool

// TODO: Partial ordering screws everything up
(>) a b = b < a
(<=) a b = not (b < a)
(>=) a b = not (a < b)

impl Cmp I8  with (<) x y = builtin "LessSigned" x y
impl Cmp I16 with (<) x y = builtin "LessSigned" x y
impl Cmp I32 with (<) x y = builtin "LessSigned" x y
impl Cmp I64 with (<) x y = builtin "LessSigned" x y
impl Cmp Isz with (<) x y = builtin "LessSigned" x y

impl Cmp U8  with (<) x y = builtin "LessUnsigned" x y
impl Cmp U16 with (<) x y = builtin "LessUnsigned" x y
impl Cmp U32 with (<) x y = builtin "LessUnsigned" x y
impl Cmp U64 with (<) x y = builtin "LessUnsigned" x y
impl Cmp Usz with (<) x y = builtin "LessUnsigned" x y

impl Cmp (Float a) with (<) x y = builtin "LessFloat" x y

impl TryCast I64 U64 with
    try_cast x =
        if x < 0 then None
        else Some (transmute x)

impl TryCast U64 I64 with
    try_cast x =
        if x > 9_223_372_036_854_775_807 then None
        else Some (transmute x)

trait Append a with
    (++): a - a -> a

trait Extract collection index -> elem with
    (#): collection - index -> elem

impl Extract (Ptr t) Usz t with
    (#) ptr index = deref_ptr <| offset ptr index


// Bitwise functions
// TODO: Move these to separate module
//       Currently this is prevented by the use of 'builtin'
//       which is limited to the prelude.

// Should these be traits instead?
band (x: Int a) (y: Int a) : Int a =
    builtin "BitwiseAnd" x y

bor (x: Int a) (y: Int a) : Int a =
    builtin "BitwiseOr" x y

bxor (x: Int a) (y: Int a) : Int a =
    builtin "BitwiseXor" x y

bnot (x: Int a) : Int a =
    builtin "BitwiseNot" x


type Type t = | MkType

size_of (v: Type t) : Usz = builtin "SizeOf" v

offset (ptr: Ptr t) (index: Usz) : Ptr t =
    builtin "Offset" ptr index
    // addr: Usz = transmute ptr
    // new_addr = addr + index * size_of (MkType: Type t)
    // transmute new_addr

deref (x: Ref t) : t =
    builtin "Deref" x

deref_ptr (p: Ptr t) : t =
    deref <| transmute p

ptr_store (p: Ptr a) (value: a) : Unit =
    addr: Ref a = transmute p
    addr := value

array_insert (p: Ptr a) (index: Usz) (value: a) : Unit =
    offset p index |> ptr_store value

ptr_to_ref: Ptr a -> Ref a = transmute

(@) = deref

null (): Ptr a = transmute 0usz

transmute (x: a) : b =
    builtin "Transmute" x

// TODO: 'mut' and special-case extract versus append
// trait Insert collection index elem
//     (#): mut collection - index - elem -> Unit

trait In elem col with
    (in): elem - col -> Bool

// trait Deref ptr -> elem
//     deref: ptr -> elem

// TODO: Do we really need a separate trait for unary '-'?
// trait Neg t
//     (-): t -> t


trait Print t with
    printne: t -> Unit

print x =
    printne x
    putchar '\n'

impl Print U8  with printne x = print_unsigned (cast x)
impl Print U16 with printne x = print_unsigned (cast x)
impl Print U32 with printne x = print_unsigned (cast x)
impl Print U64 with printne x = print_unsigned x
impl Print Usz with printne x = print_unsigned (cast x)

impl Print I8 with
    printne x = print_signed (cast x) -128 "-128"

impl Print I16 with
    printne x = print_signed (cast x) -32_768 "-32_768"

impl Print I32 with
    printne x = print_signed (cast x) -2_147_483_648 "-2_147_483_648"

impl Print I64 with
    printne x = print_signed x -9_223_372_036_854_775_808 "-9_223_372_036_854_775_808"

// TODO: This is broken for non-64-bit platforms.
impl Print Isz with
    printne x =
        print_signed (cast x) -9_223_372_036_854_775_808 "-9_223_372_036_854_775_808"


impl Print Char with printne x = putchar x

impl Print F64 with printne = print_float
impl Print F32 with printne x = print_float (cast x)

// TODO: temporary, very inaccurate
print_float (f: F64) =
    if f < 0.0 then
        putchar '-'
        print_float (0.0-f)
    else
        uint = cast f
        print_unsigned uint
        putchar '.'
        f2 = f - cast uint
        // Show up to 5 decimal places
        print_unsigned (cast (f2 * 10_000.0))

impl Print String with printne s = print_string s
impl Print (Ptr Char) with printne s = print_c_string s

impl Print (Maybe a) given Print a with
    printne m =
        match m
        | Some a -> printne a
        | None -> printne "None"

impl Print (Ref a) given Print a with
    printne r = printne @r

unwrap (m: Maybe t) : t =
    match m
    | Some x -> x
    | None -> panic "Tried to unwrap a None value"

// Naive replacement for printf which isn't supported by the cranelift backend
print_unsigned (x: U64) : Unit =
    if x >= 10 then print_unsigned (x / 10)
    digit: Char = cast (x % 10)
    putchar (digit + '0')

print_signed (x: I64) (min: I64) (min_string: String) : Unit =
    if x < 0 then
        if x == min then
            printne min_string
        else
            putchar '-'
            print_unsigned <| unwrap <| try_cast (0-x)
    else
        print_unsigned <| unwrap <| try_cast x

print_string (s: String) : Unit =
    loop s (i = 0) ->
        if i < s.length then
            off = offset (s.c_string) i
            c = deref_ptr off
            putchar c
            recur s (i + 1)
        else ()

print_c_string (s: Ptr Char) : Unit =
    loop s (i = 0) ->
        c = deref_ptr (offset s i)
        if c != '\0' then
            putchar c
            recur s (i + 1)
        else ()

impl Print Bool with
    printne b =
        if b then printne "true"
        else printne "false"

// TODO: This impl would conflict with others
// impl Print t given Cast t String
//     printne t = printne (t as String)


impl Cast String (Ptr Char) with
    cast s = s.c_string

impl Cast (Int a) String given Div (Int a), Mod (Int a), Cmp (Int a) with
    cast i =
      abs, sign_off = if i < 0 then (i * -1, 1) else (i, 0)
      len = loop abs (cmp = 10) ->
        next = cmp * 10 // Here to check for overflow
        if abs >= cmp and next > cmp
        then 1 + recur abs next
        else 1

      size = len + sign_off + 1
      buf = malloc size
      if sign_off == 1
      then ptr_to_ref <| offset buf 0 := '-'
      ptr_to_ref <| offset buf (size - 1) := '\0'

      loop (pos = len - 1) (buf = offset buf sign_off) abs ->
        char_offset = builtin "Truncate" (abs % 10)
        ptr_to_ref <| offset buf pos := '0' + char_offset
        if pos > 0
        then recur (pos - 1) buf (abs / 10)

      String buf (size - 1)


// TODO: mut
// parse (s: String) -> Maybe int =
//     i = mut 0
//     sum = mut 0
//     isNeg =
//         if s.len == 0 or s.c_string#0 == '-' then false
//         else ((i += 1); true)
// 
//     while s.c_string#i != '\0' do
//         c = s.c_string#i
//         if c >= '0' and c <= '9' then
//             sum *= 10
//             sum += cast (c - '0')
//             i += 1
//             None
//         else
//             return None
// 
//     Some (if isNeg then -1 * sum else sum)

impl Eq (Ref t) given Eq t with
    (==) l r = deref l == deref r

// This `given` clause is required by the current trait checker since t is generalized
impl Eq (Ptr t) given Cast (Ptr t) Usz with
    (==) l r = (transmute l : Usz) == transmute r


trait Iterator it -> elem with
    next: it -> Maybe (it, elem)

iter iterable f =
    match next iterable
    | None -> ()
    | Some (rest, elem) ->
        f elem
        iter rest f

type Range t = start: t, end: t

impl Iterator (Range (Int a)) (Int a) given Cmp (Int a) with
    next range =
        if range.start >= range.end
        then None
        else
            next = Range (range.start + 1) range.end
            Some (next, range.start)

iter_range (from: Usz) (to: Usz) (f: Usz => Unit) : Unit =
    iter (Range from to) f

repeat (count: Usz) (f: Usz => Unit) : Unit =
    iter (Range 0 count) f

// Iterating through an InFile iterates through each line
impl Iterator InFile String with
    next infile =
        if eof infile
        then None
        else Some (infile, next_line infile)

// TODO: manually construct a String from parts
// impl Cast (Ref Char) String with
//     cast c_string = String c_string (cast (strlen c_string))

// impl Eq String
//     (==) l r =
//         if l.len != r.len then
//             return false
// 
//         for i in 0 .. l.len do
//             if l.c_string#i != r.c_string#i then
//                 return false
//         true

impl Append String with
    (++) s1 s2 =
        if s1.length == 0 then return s2
        if s2.length == 0 then return s1

        len = s1.length + s2.length
        buf = malloc (len + 1)

        memcpy buf (s1.c_string) (cast s1.length)

        buf_offset = cast (cast buf + s1.length)
        memcpy buf_offset (s2.c_string) (cast s2.length + 1) //copy terminating null too

        String buf len

panic msg =
    print msg
    exit 1

impl Extract String Usz Char with
    (#) s index = s.c_string#index

// impl Insert String int Char
//     insert str index Char =
//         str.c_string#index := Char

open_infile (path: String) : InFile =
    InFile (fopen path.c_string "r".c_string)

open_outfile (path: String) : OutFile =
    OutFile (fopen path.c_string "w".c_string)

//Convenience function for using feof with better types
eof (f: InFile) : Bool =
    feof f != 0

next_char (f: InFile) : Char =
    cast (fgetc f)

// TODO: Why is this being monomorphised twice?
next_line (f: InFile) : String =
    if eof f then return ""

    capacity = mut 32
    cstr = mut malloc @capacity

    len = loop (len = 0) ->
        next = next_char f
        if next < 0 then return len
        c: Char = cast next

        //Flag feof if eof occurs after terminating newline
        if c == '\n' then
            peek = next_char f
            if peek >= 0 then ungetc (cast peek) f
            return len

        if len + 1 >= @capacity then
            capacity := @capacity * 2
            cstr := realloc (@cstr) (@capacity)

        array_insert (@cstr) len c
        recur (len + 1)

    array_insert (@cstr) len '\0'
    String (@cstr) len

// Read a line from stdin, ending with (and not including) a terminating '\n'
read_line () : String =
    buffer, len = loop (buffer = null ()) (len = 0) ->
        c = getchar ()
        c_char = cast c : Char

        buffer2 = if len % 32 == 0
            then realloc buffer (len + 32)
            else buffer

        array_insert buffer2 len c_char

        if c_char != '\n' and c >= 0
        then recur buffer2 (len + 1)
        else buffer2, len

    array_insert buffer len '\0'
    String buffer len

input msg =
    printne msg
    read_line ()
